package scala.meta
package internal
package quasiquotes

import scala.runtime.ScalaRunTime
import scala.quoted._
import scala.meta.{Tree => MetaTree}
import scala.meta.internal.trees.Quasi
import scala.meta.internal.parsers.Absolutize._
import scala.meta.internal.parsers.Messages

import scala.collection.mutable
import scala.annotation.tailrec
import scala.meta.trees.Origin

// uses holes in implementation, for which we do not have access here, so we implement those elsewhere
trait InternalTrait(using val internalQuotes: Quotes) {
  def liftTree(tree: MetaTree): internalQuotes.reflect.Tree
  def liftOptionTree[T: Type](maybeTree: Option[MetaTree]): internalQuotes.reflect.Tree
  def liftTrees[T: Type](trees: Seq[MetaTree]): internalQuotes.reflect.Tree
  def liftTreess(treess: List[List[MetaTree]]): internalQuotes.reflect.Tree
  def liftQuasi0(quasi: Quasi, optional: Boolean = false): internalQuotes.reflect.Tree
  def liftOrigin(origin: Origin): internalQuotes.reflect.Tree

  protected def unquotesName(q: scala.meta.internal.trees.Quasi): Boolean
}

// In Scala 2 version, this part of the codebase was automatically generated by a macro,
// with materializeAst[MetaTree].
// Probably would be better if it was also generated here, by a similar macro or by a custom codegen script.
trait ExprLifts(using override val internalQuotes: Quotes)(isPatternMode: Boolean, dialectExpr: Expr[Dialect]) extends ReificationMacros with InternalTrait {
  import internalQuotes.reflect._

  def treeByMode[T](expr: Expr[T], origin: Option[Tree], args: Tree*): Tree =
    val term = expr.asTerm match
      case Inlined(_, _, inlined) => inlined
    def getResultType(x: TypeRepr, hasImplicit: Boolean): (TypeRepr, Boolean) = x match
      case mType @ MethodType(_, _, res) => getResultType(res, hasImplicit || mType.isImplicit)
      case res => (res, hasImplicit)
    val apply = term.symbol.methodMember("apply").head
    val (resType, hasImplicit) = getResultType(expr.asTerm.tpe.memberType(apply), hasImplicit = false)
    resType.asType match
      case '[t] =>
        if isPatternMode then
          TypedOrTest(Unapply(Select.unique(term, "unapply"), Nil, args.toList), TypeTree.of[t])
        else 
          val applied = Select.overloaded(term, "apply", Nil, (origin.map(List(_)).getOrElse(Nil) ++ args.toList).asInstanceOf[List[Term]])
          applied.tpe match
            case MethodType(_, _, _) => Apply(applied, List(dialectExpr.asTerm))
            case _ => applied

  def term[T <: MetaTree](tree: T): Tree = liftableSubTree0(tree)
  def term[T <: MetaTree: Type](tree: Seq[T]): Tree = liftTrees[T](tree)
  def term[T <: MetaTree: Type](tree: List[T]): Tree = liftTrees[T](tree)
  @scala.annotation.targetName("term2") def term[T <: MetaTree: Type](tree: Seq[List[T]]): Tree = liftTreess(tree.toList)
  @scala.annotation.targetName("term3") def term[T <: MetaTree: Type](tree: List[List[T]]): Tree = liftTreess(tree)
  def term[T <: MetaTree: Type](tree: Option[T]): Tree = liftOptionTree[T](tree)
  def term(tree: Origin): Option[Tree] = if (isPatternMode) None else Some(liftOrigin(tree))

  def term(tree: String): Tree = Literal(StringConstant(tree))
  def term(tree: Byte): Tree = Literal(ByteConstant(tree))
  def term(tree: Int): Tree = Literal(IntConstant(tree))
  def term(tree: Long): Tree = Literal(LongConstant(tree))
  def term(tree: Boolean): Tree = Literal(BooleanConstant(tree))
    
  def liftQuasi(y: scala.meta.internal.trees.Quasi) = liftQuasi0(y)
  def liftTypeFuncParamClause(y: scala.meta.Type.FuncParamClause) = treeByMode('{scala.meta.Type.FuncParamClause}, term(y.origin), term(y.values))
  def liftTypeBounds(y: scala.meta.Type.Bounds) = treeByMode('{scala.meta.Type.Bounds}, term(y.origin), term(y.lo), term(y.hi))
  def liftMemberParamClauseGroup(y: scala.meta.Member.ParamClauseGroup) = treeByMode('{scala.meta.Member.ParamClauseGroup}, term(y.origin), term(y.tparamClause), term(y.paramClauses))
  def liftTemplate(y: scala.meta.Template) = treeByMode('{scala.meta.Template.After_4_9_9}, term(y.origin), term(y.earlyClause), term(y.inits), term(y.body), term(y.`derives`))
  def liftImporter(y: scala.meta.Importer) = treeByMode('{scala.meta.Importer}, term(y.origin), term(y.ref), term(y.importees))
  def liftSource(y: scala.meta.Source) = treeByMode('{scala.meta.Source}, term(y.origin), term(y.stats))
  def liftMultiSource(y: scala.meta.MultiSource) = treeByMode('{scala.meta.MultiSource}, term(y.origin), term(y.sources))
  def liftInit(y: scala.meta.Init) = treeByMode('{scala.meta.Init.After_4_6_0}, term(y.origin), term(y.tpe), term(y.name), term(y.argClauses))
  def liftNameAnonymous(y: scala.meta.Name.Anonymous) = treeByMode('{scala.meta.Name.Anonymous}, term(y.origin))
  def liftNameThis(y: scala.meta.Name.This) = treeByMode('{scala.meta.Name.This}, term(y.origin))
  def liftNameIndeterminate(y: scala.meta.Name.Indeterminate) = treeByMode('{scala.meta.Name.Indeterminate}, term(y.origin), term(y.value))
  def liftNamePlaceholder(y: scala.meta.Name.Placeholder) = treeByMode('{scala.meta.Name.Placeholder}, term(y.origin))
  def liftTermName(y: scala.meta.Term.Name) = treeByMode('{scala.meta.Term.Name}, term(y.origin), term(y.value))
  def liftTermAnonymous(y: scala.meta.Term.Anonymous) = treeByMode('{scala.meta.Term.Anonymous}, term(y.origin))
  def liftTypeName(y: scala.meta.Type.Name) = treeByMode('{scala.meta.Type.Name}, term(y.origin), term(y.value))
  def liftTermThis(y: scala.meta.Term.This) = treeByMode('{scala.meta.Term.This}, term(y.origin), term(y.qual))
  def liftTermSuper(y: scala.meta.Term.Super) = treeByMode('{scala.meta.Term.Super}, term(y.origin), term(y.thisp), term(y.superp))
  def liftTermSelect(y: scala.meta.Term.Select) = treeByMode('{scala.meta.Term.Select}, term(y.origin), term(y.qual), term(y.name))
  def liftTermApplyUnary(y: scala.meta.Term.ApplyUnary) = treeByMode('{scala.meta.Term.ApplyUnary}, term(y.origin), term(y.op), term(y.arg))
  def liftTypeSelect(y: scala.meta.Type.Select) = treeByMode('{scala.meta.Type.Select}, term(y.origin), term(y.qual), term(y.name))
  def liftTypeProject(y: scala.meta.Type.Project) = treeByMode('{scala.meta.Type.Project}, term(y.origin), term(y.qual), term(y.name))
  def liftTypeSingleton(y: scala.meta.Type.Singleton) = treeByMode('{scala.meta.Type.Singleton}, term(y.origin), term(y.ref))
  def liftImporteeWildcard(y: scala.meta.Importee.Wildcard) = treeByMode('{scala.meta.Importee.Wildcard}, term(y.origin))
  def liftImporteeGiven(y: scala.meta.Importee.Given) = treeByMode('{scala.meta.Importee.Given}, term(y.origin), term(y.tpe))
  def liftImporteeGivenAll(y: scala.meta.Importee.GivenAll) = treeByMode('{scala.meta.Importee.GivenAll}, term(y.origin))
  def liftImporteeName(y: scala.meta.Importee.Name) = treeByMode('{scala.meta.Importee.Name}, term(y.origin), term(y.name))
  def liftImporteeRename(y: scala.meta.Importee.Rename) = treeByMode('{scala.meta.Importee.Rename}, term(y.origin), term(y.name), term(y.rename))
  def liftImporteeUnimport(y: scala.meta.Importee.Unimport) = treeByMode('{scala.meta.Importee.Unimport}, term(y.origin), term(y.name))
  def liftTypeAnonymousName(y: scala.meta.Type.AnonymousName) = treeByMode('{scala.meta.Type.AnonymousName}, term(y.origin))
  def liftTypeApply(y: scala.meta.Type.Apply) = treeByMode('{scala.meta.Type.Apply.After_4_6_0}, term(y.origin), term(y.tpe), term(y.argClause))
  def liftTypeApplyInfix(y: scala.meta.Type.ApplyInfix) = treeByMode('{scala.meta.Type.ApplyInfix.Initial}, term(y.origin), term(y.lhs), term(y.op), term(y.rhs))
  def liftTypePolyFunction(y: scala.meta.Type.PolyFunction) = treeByMode('{scala.meta.Type.PolyFunction.After_4_6_0}, term(y.origin), term(y.tparamClause), term(y.tpe))
  def liftTypeImplicitFunction(y: scala.meta.Type.ImplicitFunction) = treeByMode('{scala.meta.Type.ImplicitFunction.Initial}, term(y.origin), term(y.params), term(y.res))
  def liftTypeTuple(y: scala.meta.Type.Tuple) = treeByMode('{scala.meta.Type.Tuple.Initial}, term(y.origin), term(y.args))
  def liftTypeWith(y: scala.meta.Type.With) = treeByMode('{scala.meta.Type.With.Initial}, term(y.origin), term(y.lhs), term(y.rhs))
  def liftTypeAnd(y: scala.meta.Type.And) = treeByMode('{scala.meta.Type.And.Initial}, term(y.origin), term(y.lhs), term(y.rhs))
  def liftTypeOr(y: scala.meta.Type.Or) = treeByMode('{scala.meta.Type.Or.Initial}, term(y.origin), term(y.lhs), term(y.rhs))
  def liftTypeRefine(y: scala.meta.Type.Refine) = treeByMode('{scala.meta.Type.Refine.After_4_9_9}, term(y.origin), term(y.tpe), term(y.body))
  def liftTypeExistential(y: scala.meta.Type.Existential) = treeByMode('{scala.meta.Type.Existential.After_4_9_9}, term(y.origin), term(y.tpe), term(y.body))
  def liftTypeAnnotate(y: scala.meta.Type.Annotate) = treeByMode('{scala.meta.Type.Annotate.Initial}, term(y.origin), term(y.tpe), term(y.annots))
  def liftTypeLambda(y: scala.meta.Type.Lambda) = treeByMode('{scala.meta.Type.Lambda.After_4_6_0}, term(y.origin), term(y.tparamClause), term(y.tpe))
  def liftTypeAnonymousLambda(y: scala.meta.Type.AnonymousLambda) = treeByMode('{scala.meta.Type.AnonymousLambda.Initial}, term(y.origin), term(y.tpe))
  def liftTypeMacro(y: scala.meta.Type.Macro) = treeByMode('{scala.meta.Type.Macro.Initial}, term(y.origin), term(y.body))
  def liftTypeMethod(y: scala.meta.Type.Method) = treeByMode('{scala.meta.Type.Method.After_4_6_0}, term(y.origin), term(y.paramClauses), term(y.tpe))
  def liftTypePatWildcard(y: scala.meta.Type.PatWildcard) = treeByMode('{scala.meta.Type.PatWildcard}, term(y.origin))
  def liftTypeByName(y: scala.meta.Type.ByName) = treeByMode('{scala.meta.Type.ByName.Initial}, term(y.origin), term(y.tpe))
  def liftTypeRepeated(y: scala.meta.Type.Repeated) = treeByMode('{scala.meta.Type.Repeated.Initial}, term(y.origin), term(y.tpe))
  def liftTypeVar(y: scala.meta.Type.Var) = treeByMode('{scala.meta.Type.Var.Initial}, term(y.origin), term(y.name))
  def liftTypeMatch(y: scala.meta.Type.Match) = treeByMode('{scala.meta.Type.Match.After_4_9_9}, term(y.origin), term(y.tpe), term(y.casesBlock))
  def liftLitNull(y: scala.meta.Lit.Null) = treeByMode('{scala.meta.Lit.Null}, term(y.origin))
  def liftLitInt(y: scala.meta.Lit.Int) = treeByMode('{scala.meta.Lit.Int.Initial}, term(y.origin), term(y.value))
  def liftLitDouble(y: scala.meta.Lit.Double) = treeByMode('{scala.meta.Lit.Double.Initial}, term(y.origin), term(y.format))
  def liftLitFloat(y: scala.meta.Lit.Float) = treeByMode('{scala.meta.Lit.Float.Initial}, term(y.origin), term(y.format))
  def liftLitByte(y: scala.meta.Lit.Byte) = treeByMode('{scala.meta.Lit.Byte.Initial}, term(y.origin), term(y.value))
  def liftLitShort(y: scala.meta.Lit.Short) = treeByMode('{scala.meta.Lit.Short.Initial}, term(y.origin), term(y.value))
  def liftLitChar(y: scala.meta.Lit.Char) = treeByMode('{scala.meta.Lit.Char.Initial}, term(y.origin), term(y.value))
  def liftLitLong(y: scala.meta.Lit.Long) = treeByMode('{scala.meta.Lit.Long.Initial}, term(y.origin), term(y.value))
  def liftLitBoolean(y: scala.meta.Lit.Boolean) = treeByMode('{scala.meta.Lit.Boolean.Initial}, term(y.origin), term(y.value))
  def liftLitUnit(y: scala.meta.Lit.Unit) = treeByMode('{scala.meta.Lit.Unit}, term(y.origin))
  def liftLitString(y: scala.meta.Lit.String) = treeByMode('{scala.meta.Lit.String.Initial}, term(y.origin), term(y.value))
  // def liftLitSymbol(y: scala.meta.Lit.Symbol) = treeByMode('{scala.meta.Lit.Symbol}, term(y.value))
  def liftTypeFunction(y: scala.meta.Type.Function) = treeByMode('{scala.meta.Type.Function.After_4_6_0}, term(y.origin), term(y.paramClause), term(y.res))
  def liftTypeContextFunction(y: scala.meta.Type.ContextFunction) = treeByMode('{scala.meta.Type.ContextFunction.After_4_6_0}, term(y.origin), term(y.paramClause), term(y.res))
  def liftTypePlaceholderImpl(y: scala.meta.Type.Placeholder.Impl) = treeByMode('{scala.meta.Type.Placeholder.Impl.Initial}, term(y.origin), term(y.bounds))
  def liftTypeWildcard(y: scala.meta.Type.Wildcard) = treeByMode('{scala.meta.Type.Wildcard.Initial}, term(y.origin), term(y.bounds))
  def liftTypeAnonymousParam(y: scala.meta.Type.AnonymousParam) = treeByMode('{scala.meta.Type.AnonymousParam.Initial}, term(y.origin), term(y.variant))
  def liftTypeTypedParam(y: scala.meta.Type.TypedParam) = treeByMode('{scala.meta.Type.TypedParam.After_4_7_8}, term(y.origin), term(y.name), term(y.typ), term(y.mods))
  def liftTypeFunctionArg(y: scala.meta.Type.FunctionArg) = treeByMode('{scala.meta.Type.FunctionArg.Initial}, term(y.origin), term(y.mods), term(y.tpe))
  def liftPatVar(y: scala.meta.Pat.Var) = treeByMode('{scala.meta.Pat.Var.Initial}, term(y.origin), term(y.name))
  def liftPatWildcard(y: scala.meta.Pat.Wildcard) = treeByMode('{scala.meta.Pat.Wildcard}, term(y.origin))
  def liftPatSeqWildcard(y: scala.meta.Pat.SeqWildcard) = treeByMode('{scala.meta.Pat.SeqWildcard}, term(y.origin))
  def liftPatBind(y: scala.meta.Pat.Bind) = {
    {
      import internalQuotes.reflect._
      def prohibitName(pat: scala.meta.Tree): Unit = {
        pat match {
          case (q @ (_: scala.meta.internal.trees.Quasi)) if unquotesName(q) => {
            val action =
              if (q.rank == 0) "unquote"
              else "splice"
            report.errorAndAbort("can\'t " + action + " a name here, use a pattern instead (e.g. p\"x\")")
          }
          case _ => ()
        }
      };
      prohibitName(y.lhs)
    }
    treeByMode('{scala.meta.Pat.Bind}, term(y.origin), term(y.lhs), term(y.rhs))
  }
  def liftPatAlternative(y: scala.meta.Pat.Alternative) = treeByMode('{scala.meta.Pat.Alternative.Initial}, term(y.origin), term(y.lhs), term(y.rhs))
  def liftPatTuple(y: scala.meta.Pat.Tuple) = treeByMode('{scala.meta.Pat.Tuple.Initial}, term(y.origin),term(y.args))
  def liftPatRepeated(y: scala.meta.Pat.Repeated) = treeByMode('{scala.meta.Pat.Repeated.Initial}, term(y.origin), term(y.name))
  def liftPatExtract(y: scala.meta.Pat.Extract) = treeByMode('{scala.meta.Pat.Extract.After_4_6_0}, term(y.origin), term(y.fun), term(y.argClause))
  def liftPatExtractInfix(y: scala.meta.Pat.ExtractInfix) = treeByMode('{scala.meta.Pat.ExtractInfix.After_4_6_0}, term(y.origin), term(y.lhs), term(y.op), term(y.argClause))
  def liftPatInterpolate(y: scala.meta.Pat.Interpolate) = treeByMode('{scala.meta.Pat.Interpolate.Initial}, term(y.origin), term(y.prefix), term(y.parts), term(y.args))
  def liftPatXml(y: scala.meta.Pat.Xml) = treeByMode('{scala.meta.Pat.Xml.Initial}, term(y.origin), term(y.parts), term(y.args))
  def liftPatTyped(y: scala.meta.Pat.Typed) = {
    {
      import internalQuotes.reflect._
      def prohibitName(pat: scala.meta.Tree): Unit = {
        pat match {
          case (q @ (_: scala.meta.internal.trees.Quasi)) if unquotesName(q) => {
            val action =
              if (q.rank == 0) "unquote"
              else "splice"
            report.errorAndAbort("can\'t " + action + " a name here, use a pattern instead (e.g. p\"x\")")
          }
          case _ => ()
        }
      }
      prohibitName(y.lhs)
    }
    treeByMode('{scala.meta.Pat.Typed}, term(y.origin), term(y.lhs), term(y.rhs))
  }
  def liftPatMacro(y: scala.meta.Pat.Macro) = treeByMode('{scala.meta.Pat.Macro.Initial}, term(y.origin), term(y.body))
  def liftPatGiven(y: scala.meta.Pat.Given) = treeByMode('{scala.meta.Pat.Given.Initial}, term(y.origin), term(y.tpe))
  def liftPkg(y: scala.meta.Pkg) = treeByMode('{scala.meta.Pkg.After_4_9_9}, term(y.origin), term(y.ref), term(y.body))
  def liftPkgObject(y: scala.meta.Pkg.Object) = treeByMode('{scala.meta.Pkg.Object.Initial}, term(y.origin), term(y.mods), term(y.name), term(y.templ))
  def liftCtorSecondary(y: scala.meta.Ctor.Secondary) = treeByMode('{scala.meta.Ctor.Secondary.After_4_9_9}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauses), term(y.body))
  def liftTermInterpolate(y: scala.meta.Term.Interpolate) = treeByMode('{scala.meta.Term.Interpolate.Initial}, term(y.origin), term(y.prefix), term(y.parts), term(y.args))
  def liftTermXml(y: scala.meta.Term.Xml) = treeByMode('{scala.meta.Term.Xml.Initial}, term(y.origin), term(y.parts), term(y.args))
  def liftTermApply(y: scala.meta.Term.Apply) = {
    object ApplyToTripleDots extends scala.AnyRef {
      def unapply(t: scala.meta.Term.Apply): Option[scala.Tuple2[scala.meta.Term, scala.meta.Term.ArgClause.Quasi]] = t.argClause match {
        case (arg @ (_: scala.meta.Term.ArgClause.Quasi)) if arg.rank == 1 => scala.Some(scala.Tuple2(t.fun, arg))
        case _ => scala.None
      }
    }
    @tailrec() def checkNoTripleDots(fn: scala.meta.Term, arg: scala.meta.internal.trees.Quasi): Unit = fn match {
      case (t @ (_: scala.meta.Term.Apply)) => ApplyToTripleDots.unapply(t) match {
        case scala.None => checkNoTripleDots(t.fun, arg)
        case _ => ???//c.abort(arg.pos, _root_.scala.meta.internal.parsers.Messages.QuasiquoteAdjacentEllipsesInPattern(arg.rank))
      }
      case _ => ()
    }
    def applyTermQuasi(fn: scala.meta.Term)(arg: scala.meta.Term.Quasi) = {
      checkNoTripleDots(fn, arg)
      treeByMode('{scala.meta.internal.trees.Syntactic.TermApply.ArgListList}, None, term(fn), term(List(List(arg))))
    }
    def applyArgClauseQuasi(fn: _root_.scala.meta.Term)(arg: _root_.scala.meta.Term.ArgClause.Quasi) = {
      checkNoTripleDots(fn, arg)
      treeByMode('{scala.meta.internal.trees.Syntactic.TermApply.ArgList}, None, term(fn), term(List(arg)))
    }
    y match {
      case ApplyToTripleDots(fn, acq) => applyArgClauseQuasi(fn)(acq)
      case _ => treeByMode('{scala.meta.Term.Apply.After_4_6_0}, term(y.origin), term(y.fun), term(y.argClause))
    }
  }
  def liftTermApplyUsing(y: scala.meta.Term.ApplyUsing) = treeByMode('{scala.meta.Term.ApplyUsing.After_4_6_0}, term(y.origin), term(y.fun), term(y.argClause))
  def liftTermApplyType(y: scala.meta.Term.ApplyType) = treeByMode('{scala.meta.Term.ApplyType.After_4_6_0}, term(y.origin), term(y.fun), term(y.targClause))
  def liftTermApplyInfix(y: scala.meta.Term.ApplyInfix) = treeByMode('{scala.meta.Term.ApplyInfix.After_4_6_0}, term(y.origin), term(y.lhs), term(y.op), term(y.targClause), term(y.argClause))
  def liftTermAssign(y: scala.meta.Term.Assign) = treeByMode('{scala.meta.Term.Assign.Initial}, term(y.origin), term(y.lhs), term(y.rhs))
  def liftTermReturn(y: scala.meta.Term.Return) = treeByMode('{scala.meta.Term.Return.Initial}, term(y.origin), term(y.expr))
  def liftTermThrow(y: scala.meta.Term.Throw) = treeByMode('{scala.meta.Term.Throw.Initial}, term(y.origin), term(y.expr))
  def liftTermAscribe(y: scala.meta.Term.Ascribe) = treeByMode('{scala.meta.Term.Ascribe.Initial}, term(y.origin), term(y.expr), term(y.tpe))
  def liftTermAnnotate(y: scala.meta.Term.Annotate) = treeByMode('{scala.meta.Term.Annotate.Initial}, term(y.origin), term(y.expr), term(y.annots))
  def liftTermTuple(y: scala.meta.Term.Tuple) = treeByMode('{scala.meta.Term.Tuple.Initial}, term(y.origin), term(y.args))
  def liftTermBlock(y: scala.meta.Term.Block) = treeByMode('{scala.meta.Term.Block.Initial}, term(y.origin), term(y.stats))
  def liftTermEndMarker(y: scala.meta.Term.EndMarker) = treeByMode('{scala.meta.Term.EndMarker.Initial}, term(y.origin), term(y.name))
  def liftTermIf(y: scala.meta.Term.If) = treeByMode('{scala.meta.Term.If.After_4_4_0}, term(y.origin), term(y.cond), term(y.thenp), term(y.elsep), term(y.mods))
  def liftTermQuotedMacroExpr(y: scala.meta.Term.QuotedMacroExpr) = treeByMode('{scala.meta.Term.QuotedMacroExpr.Initial}, term(y.origin), term(y.body))
  def liftTermQuotedMacroType(y: scala.meta.Term.QuotedMacroType) = treeByMode('{scala.meta.Term.QuotedMacroType.Initial}, term(y.origin), term(y.tpe))
  def liftTermSplicedMacroExpr(y: scala.meta.Term.SplicedMacroExpr) = treeByMode('{scala.meta.Term.SplicedMacroExpr.Initial}, term(y.origin), term(y.body))
  def liftTermSplicedMacroPat(y: scala.meta.Term.SplicedMacroPat) = treeByMode('{scala.meta.Term.SplicedMacroPat.Initial}, term(y.origin), term(y.pat))
  def liftTermMatch(y: scala.meta.Term.Match) = treeByMode('{scala.meta.Term.Match.After_4_9_9}, term(y.origin), term(y.expr), term(y.casesBlock), term(y.mods))
  def liftTermTry(y: scala.meta.Term.Try) = treeByMode('{scala.meta.Term.Try.After_4_9_9}, term(y.origin), term(y.expr), term(y.catchClause), term(y.finallyp))
  def liftTermTryWithHandler(y: scala.meta.Term.TryWithHandler) = treeByMode('{scala.meta.Term.TryWithHandler.Initial}, term(y.origin), term(y.expr), term(y.catchp), term(y.finallyp))
  def liftTermAnonymousFunction(y: scala.meta.Term.AnonymousFunction) = treeByMode('{scala.meta.Term.AnonymousFunction.Initial}, term(y.origin), term(y.body))
  def liftTermPolyFunction(y: scala.meta.Term.PolyFunction) = treeByMode('{scala.meta.Term.PolyFunction.After_4_6_0}, term(y.origin), term(y.tparamClause), term(y.body))
  def liftTermPartialFunction(y: scala.meta.Term.PartialFunction) = treeByMode('{scala.meta.Term.PartialFunction.Initial}, term(y.origin), term(y.cases))
  def liftTermWhile(y: scala.meta.Term.While) = treeByMode('{scala.meta.Term.While.Initial}, term(y.origin), term(y.expr), term(y.body))
  def liftTermDo(y: scala.meta.Term.Do) = treeByMode('{scala.meta.Term.Do.Initial}, term(y.origin), term(y.body), term(y.expr))
  def liftTermFor(y: scala.meta.Term.For) = treeByMode('{scala.meta.Term.For.After_4_9_9}, term(y.origin), term(y.enumsBlock), term(y.body))
  def liftTermForYield(y: scala.meta.Term.ForYield) = treeByMode('{scala.meta.Term.ForYield.After_4_9_9}, term(y.origin), term(y.enumsBlock), term(y.body))
  def liftTermNew(y: scala.meta.Term.New) = treeByMode('{scala.meta.Term.New.Initial}, term(y.origin), term(y.init))
  def liftTermNewAnonymous(y: scala.meta.Term.NewAnonymous) = treeByMode('{scala.meta.Term.NewAnonymous.Initial}, term(y.origin), term(y.templ))
  def liftTermPlaceholder(y: scala.meta.Term.Placeholder) = treeByMode('{scala.meta.Term.Placeholder}, term(y.origin))
  def liftTermEta(y: scala.meta.Term.Eta) = treeByMode('{scala.meta.Term.Eta.Initial}, term(y.origin), term(y.expr))
  def liftTermRepeated(y: scala.meta.Term.Repeated) = treeByMode('{scala.meta.Term.Repeated.Initial}, term(y.origin), term(y.expr))
  def liftTermContextFunction(y: scala.meta.Term.ContextFunction) = treeByMode('{scala.meta.Term.ContextFunction.After_4_6_0}, term(y.origin), term(y.paramClause), term(y.body))
  def liftTermFunction(y: scala.meta.Term.Function) = treeByMode('{scala.meta.Term.Function.After_4_6_0}, term(y.origin), term(y.paramClause), term(y.body))
  def liftDefnGiven(y: scala.meta.Defn.Given) = treeByMode('{scala.meta.Defn.Given.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauseGroup), term(y.templ))
  def liftDefnEnum(y: scala.meta.Defn.Enum) = treeByMode('{scala.meta.Defn.Enum.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.ctor), term(y.templ))
  def liftDefnClass(y: scala.meta.Defn.Class) = treeByMode('{scala.meta.Defn.Class.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.ctor), term(y.templ))
  def liftDefnTrait(y: scala.meta.Defn.Trait) = treeByMode('{scala.meta.Defn.Trait.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.ctor), term(y.templ))
  def liftDefnObject(y: scala.meta.Defn.Object) = treeByMode('{scala.meta.Defn.Object.Initial}, term(y.origin), term(y.mods), term(y.name), term(y.templ))
  def liftDeclVal(y: scala.meta.Decl.Val) = treeByMode('{scala.meta.Decl.Val.Initial}, term(y.origin), term(y.mods), term(y.pats), term(y.decltpe))
  def liftDeclVar(y: scala.meta.Decl.Var) = treeByMode('{scala.meta.Decl.Var.Initial}, term(y.origin), term(y.mods), term(y.pats), term(y.decltpe))
  def liftDeclDef(y: scala.meta.Decl.Def) = treeByMode('{scala.meta.Decl.Def.After_4_7_3}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauseGroups), term(y.decltpe))
  def liftDeclType(y: scala.meta.Decl.Type) = treeByMode('{scala.meta.Decl.Type.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.bounds))
  def liftDeclGiven(y: scala.meta.Decl.Given) = treeByMode('{scala.meta.Decl.Given.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauseGroup), term(y.decltpe))
  def liftDefnVal(y: scala.meta.Defn.Val) = {
    import internalQuotes.reflect._
    y.pats.foreach(((pat) => {
      def prohibitName(pat: scala.meta.Tree): _root_.scala.Unit = {
        pat match {
          case (q @ (_: scala.meta.internal.trees.Quasi)) if unquotesName(q) => {
            val action =
              if (q.rank == 0) "unquote"
              else "splice"
            report.errorAndAbort("can\'t " + action + " a name here, use a pattern instead (e.g. p\"x\")")
          }
          case _ => ()
        }
      }
      prohibitName(pat)
    }))
    treeByMode('{scala.meta.Defn.Val}, term(y.origin), term(y.mods), term(y.pats), term(y.decltpe), term(y.rhs))
  }
  def liftDefnVar(y: scala.meta.Defn.Var) = {
    import internalQuotes.reflect._
    y.pats.foreach(((pat) => {
      def prohibitName(pat: scala.meta.Tree): _root_.scala.Unit = {
        pat match {
          case (q @ (_: scala.meta.internal.trees.Quasi)) if unquotesName(q) => {
            val action =
              if (q.rank == 0) "unquote"
              else "splice"
            report.errorAndAbort("can\'t " + action + " a name here, use a pattern instead (e.g. p\"x\")")
          }
          case _ => ()
        }
      }
      prohibitName(pat)
    }))
    treeByMode('{scala.meta.Defn.Var.After_4_7_2}, term(y.origin), term(y.mods), term(y.pats), term(y.decltpe), term(y.body))
  }
  def liftDefnEnumCase(y: scala.meta.Defn.EnumCase) = treeByMode('{scala.meta.Defn.EnumCase.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.ctor), term(y.inits))
  def liftDefnRepeatedEnumCase(y: scala.meta.Defn.RepeatedEnumCase) = treeByMode('{scala.meta.Defn.RepeatedEnumCase.Initial}, term(y.origin), term(y.mods), term(y.cases))
  def liftDefnGivenAlias(y: scala.meta.Defn.GivenAlias) = treeByMode('{scala.meta.Defn.GivenAlias.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauseGroup), term(y.decltpe), term(y.body))
                                            // treeByMode('{scala.meta.Decl.Def.After_4_7_3}, term(y.mods), term(y.name), term(y.paramClauseGroups), term(y.decltpe))
  def liftDefnDef(y: scala.meta.Defn.Def) = treeByMode('{scala.meta.Defn.Def.After_4_7_3}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauseGroups), term(y.decltpe), term(y.body))
  def liftDefnMacro(y: scala.meta.Defn.Macro) = treeByMode('{scala.meta.Defn.Macro.After_4_7_3}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauseGroups), term(y.decltpe), term(y.body))
  def liftDefnType(y: scala.meta.Defn.Type) = treeByMode('{scala.meta.Defn.Type.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.body), term(y.bounds))
  def liftDefnExtensionGroup(y: scala.meta.Defn.ExtensionGroup) = treeByMode('{scala.meta.Defn.ExtensionGroup.After_4_6_0}, term(y.origin), term(y.paramClauseGroup), term(y.body))
  def liftImport(y: scala.meta.Import) = treeByMode('{scala.meta.Import.Initial}, term(y.origin), term(y.importers))
  def liftExport(y: scala.meta.Export) = treeByMode('{scala.meta.Export.Initial}, term(y.origin), term(y.importers))
  def liftTermArgClause(y: scala.meta.Term.ArgClause) = treeByMode('{scala.meta.Term.ArgClause.Initial}, term(y.origin), term(y.values), term(y.mod))
  def liftTypeArgClause(y: scala.meta.Type.ArgClause) = treeByMode('{scala.meta.Type.ArgClause.Initial}, term(y.origin), term(y.values))
  def liftPatArgClause(y: scala.meta.Pat.ArgClause) = treeByMode('{scala.meta.Pat.ArgClause.Initial}, term(y.origin), term(y.values))
  def liftTermParamClause(y: scala.meta.Term.ParamClause) = treeByMode('{scala.meta.Term.ParamClause.Initial}, term(y.origin), term(y.values), term(y.mod))
  def liftTypeParamClause(y: scala.meta.Type.ParamClause) = treeByMode('{scala.meta.Type.ParamClause.Initial}, term(y.origin), term(y.values))
  def liftEnumeratorGenerator(y: scala.meta.Enumerator.Generator) = treeByMode('{scala.meta.Enumerator.Generator.Initial}, term(y.origin), term(y.pat), term(y.rhs))
  def liftEnumeratorCaseGenerator(y: scala.meta.Enumerator.CaseGenerator) = treeByMode('{scala.meta.Enumerator.CaseGenerator.Initial}, term(y.origin), term(y.pat), term(y.rhs))
  def liftEnumeratorVal(y: scala.meta.Enumerator.Val) = treeByMode('{scala.meta.Enumerator.Val.Initial}, term(y.origin), term(y.pat), term(y.rhs))
  def liftCase(y: scala.meta.Case) = treeByMode('{scala.meta.Case.Initial}, term(y.origin), term(y.pat), term(y.cond), term(y.body))
  def liftTypeCase(y: scala.meta.TypeCase) = treeByMode('{scala.meta.TypeCase.Initial}, term(y.origin), term(y.pat), term(y.body))
  def liftTypeParam(y: scala.meta.Type.Param) = treeByMode('{scala.meta.Type.Param.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.tparamClause), term(y.tbounds), term(y.vbounds), term(y.cbounds))
  def liftTermParam(y: scala.meta.Term.Param) = treeByMode('{scala.meta.Term.Param.Initial}, term(y.origin), term(y.mods), term(y.name), term(y.decltpe), term(y.default))
  def liftSelf(y: scala.meta.Self) = treeByMode('{scala.meta.Self.Initial}, term(y.origin), term(y.name), term(y.decltpe))
  def liftCtorPrimary(y: scala.meta.Ctor.Primary) = treeByMode('{scala.meta.Ctor.Primary.After_4_6_0}, term(y.origin), term(y.mods), term(y.name), term(y.paramClauses))
  def liftModAnnot(y: scala.meta.Mod.Annot) = treeByMode('{scala.meta.Mod.Annot.Initial}, term(y.origin), term(y.init))
  def liftModPrivate(y: scala.meta.Mod.Private) = treeByMode('{scala.meta.Mod.Private.Initial}, term(y.origin), term(y.within))
  def liftModProtected(y: scala.meta.Mod.Protected) = treeByMode('{scala.meta.Mod.Protected.Initial}, term(y.origin), term(y.within))
  def liftModFinal(y: scala.meta.Mod.Final) = treeByMode('{scala.meta.Mod.Final}, term(y.origin))
  def liftModSealed(y: scala.meta.Mod.Sealed) = treeByMode('{scala.meta.Mod.Sealed}, term(y.origin))
  def liftModOpen(y: scala.meta.Mod.Open) = treeByMode('{scala.meta.Mod.Open}, term(y.origin))
  def liftModSuper(y: scala.meta.Mod.Super) = treeByMode('{scala.meta.Mod.Super}, term(y.origin))
  def liftModOverride(y: scala.meta.Mod.Override) = treeByMode('{scala.meta.Mod.Override}, term(y.origin))
  def liftModCase(y: scala.meta.Mod.Case) = treeByMode('{scala.meta.Mod.Case}, term(y.origin))
  def liftModAbstract(y: scala.meta.Mod.Abstract) = treeByMode('{scala.meta.Mod.Abstract}, term(y.origin))
  def liftModLazy(y: scala.meta.Mod.Lazy) = treeByMode('{scala.meta.Mod.Lazy}, term(y.origin))
  def liftModValParam(y: scala.meta.Mod.ValParam) = treeByMode('{scala.meta.Mod.ValParam}, term(y.origin))
  def liftModVarParam(y: scala.meta.Mod.VarParam) = treeByMode('{scala.meta.Mod.VarParam}, term(y.origin))
  def liftModInfix(y: scala.meta.Mod.Infix) = treeByMode('{scala.meta.Mod.Infix}, term(y.origin))
  def liftModInline(y: scala.meta.Mod.Inline) = treeByMode('{scala.meta.Mod.Inline}, term(y.origin))
  def liftModOpaque(y: scala.meta.Mod.Opaque) = treeByMode('{scala.meta.Mod.Opaque}, term(y.origin))
  def liftModTransparent(y: scala.meta.Mod.Transparent) = treeByMode('{scala.meta.Mod.Transparent}, term(y.origin))
  def liftModErased(y: scala.meta.Mod.Erased) = treeByMode('{scala.meta.Mod.Erased}, term(y.origin))
  def liftModImplicit(y: scala.meta.Mod.Implicit) = treeByMode('{scala.meta.Mod.Implicit}, term(y.origin))
  def liftModUsing(y: scala.meta.Mod.Using) = treeByMode('{scala.meta.Mod.Using}, term(y.origin))
  def liftModCovariant(y: scala.meta.Mod.Covariant) = treeByMode('{scala.meta.Mod.Covariant}, term(y.origin))
  def liftModContravariant(y: scala.meta.Mod.Contravariant) = treeByMode('{scala.meta.Mod.Contravariant}, term(y.origin))
  def liftEnumeratorGuard(y: scala.meta.Enumerator.Guard) = treeByMode('{scala.meta.Enumerator.Guard.Initial}, term(y.origin), term(y.cond))
  def liftTemplateBody(y: scala.meta.Template.Body) = treeByMode('{scala.meta.Template.Body}, term(y.origin), term(y.selfOpt), term(y.stats))
  def liftTypeCasesBlock(y: scala.meta.Type.CasesBlock) = treeByMode('{scala.meta.Type.CasesBlock}, term(y.origin), term(y.cases))
  def liftTermCasesBlock(y: scala.meta.Term.CasesBlock) = treeByMode('{scala.meta.Term.CasesBlock}, term(y.origin), term(y.cases))
  def liftTermEnumeratorsBlock(y: scala.meta.Term.EnumeratorsBlock) = treeByMode('{scala.meta.Term.EnumeratorsBlock}, term(y.origin), term(y.enums))
  def liftStatBlock(y: scala.meta.Stat.Block) = treeByMode('{scala.meta.Stat.Block}, term(y.origin), term(y.stats))
  def liftCtorBlock(y: scala.meta.Ctor.Block) = treeByMode('{scala.meta.Ctor.Block}, term(y.origin), term(y.init), term(y.stats))
  def liftPkgBody(y: scala.meta.Pkg.Body) = treeByMode('{scala.meta.Pkg.Body}, term(y.origin), term(y.stats))

  // Apparently the order here is important
  def liftableSubTree0[T <: MetaTree](y: T)(using Quotes): Tree = {
    y match {
      case (y @ (_: scala.meta.internal.trees.Quasi)) => liftQuasi(y.asInstanceOf[scala.meta.internal.trees.Quasi])
      case (y @ (_: scala.meta.Type.FuncParamClause)) => liftTypeFuncParamClause(y.asInstanceOf[scala.meta.Type.FuncParamClause])
      case (y @ (_: scala.meta.Type.Bounds)) => liftTypeBounds(y.asInstanceOf[scala.meta.Type.Bounds])
      case (y @ (_: scala.meta.Member.ParamClauseGroup)) => liftMemberParamClauseGroup(y.asInstanceOf[scala.meta.Member.ParamClauseGroup])
      case (y @ (_: scala.meta.Template)) => liftTemplate(y.asInstanceOf[scala.meta.Template])
      case (y @ (_: scala.meta.Importer)) => liftImporter(y.asInstanceOf[scala.meta.Importer])
      case (y @ (_: scala.meta.Source)) => liftSource(y.asInstanceOf[scala.meta.Source])
      case (y @ (_: scala.meta.MultiSource)) => liftMultiSource(y.asInstanceOf[scala.meta.MultiSource])
      case (y @ (_: scala.meta.Init)) => liftInit(y.asInstanceOf[scala.meta.Init])
      case (y @ (_: scala.meta.Name.Anonymous)) => liftNameAnonymous(y.asInstanceOf[scala.meta.Name.Anonymous])
      case (y @ (_: scala.meta.Name.This)) => liftNameThis(y.asInstanceOf[scala.meta.Name.This])
      case (y @ (_: scala.meta.Name.Indeterminate)) => liftNameIndeterminate(y.asInstanceOf[scala.meta.Name.Indeterminate])
      case (y @ (_: scala.meta.Name.Placeholder)) => liftNamePlaceholder(y.asInstanceOf[scala.meta.Name.Placeholder])
      case (y @ (_: scala.meta.Term.Name)) => liftTermName(y.asInstanceOf[scala.meta.Term.Name])
      case (y @ (_: scala.meta.Term.Anonymous)) => liftTermAnonymous(y.asInstanceOf[scala.meta.Term.Anonymous])
      case (y @ (_: scala.meta.Type.Name)) => liftTypeName(y.asInstanceOf[scala.meta.Type.Name])
      case (y @ (_: scala.meta.Term.This)) => liftTermThis(y.asInstanceOf[scala.meta.Term.This])
      case (y @ (_: scala.meta.Term.Super)) => liftTermSuper(y.asInstanceOf[scala.meta.Term.Super])
      case (y @ (_: scala.meta.Term.Select)) => liftTermSelect(y.asInstanceOf[scala.meta.Term.Select])
      case (y @ (_: scala.meta.Term.ApplyUnary)) => liftTermApplyUnary(y.asInstanceOf[scala.meta.Term.ApplyUnary])
      case (y @ (_: scala.meta.Type.Select)) => liftTypeSelect(y.asInstanceOf[scala.meta.Type.Select])
      case (y @ (_: scala.meta.Type.Project)) => liftTypeProject(y.asInstanceOf[scala.meta.Type.Project])
      case (y @ (_: scala.meta.Type.Singleton)) => liftTypeSingleton(y.asInstanceOf[scala.meta.Type.Singleton])
      case (y @ (_: scala.meta.Importee.Wildcard)) => liftImporteeWildcard(y.asInstanceOf[scala.meta.Importee.Wildcard])
      case (y @ (_: scala.meta.Importee.Given)) => liftImporteeGiven(y.asInstanceOf[scala.meta.Importee.Given])
      case (y @ (_: scala.meta.Importee.GivenAll)) => liftImporteeGivenAll(y.asInstanceOf[scala.meta.Importee.GivenAll])
      case (y @ (_: scala.meta.Importee.Name)) => liftImporteeName(y.asInstanceOf[scala.meta.Importee.Name])
      case (y @ (_: scala.meta.Importee.Rename)) => liftImporteeRename(y.asInstanceOf[scala.meta.Importee.Rename])
      case (y @ (_: scala.meta.Importee.Unimport)) => liftImporteeUnimport(y.asInstanceOf[scala.meta.Importee.Unimport])
      case (y @ (_: scala.meta.Type.AnonymousName)) => liftTypeAnonymousName(y.asInstanceOf[scala.meta.Type.AnonymousName])
      case (y @ (_: scala.meta.Type.Apply)) => liftTypeApply(y.asInstanceOf[scala.meta.Type.Apply])
      case (y @ (_: scala.meta.Type.ApplyInfix)) => liftTypeApplyInfix(y.asInstanceOf[scala.meta.Type.ApplyInfix])
      case (y @ (_: scala.meta.Type.PolyFunction)) => liftTypePolyFunction(y.asInstanceOf[scala.meta.Type.PolyFunction])
      case (y @ (_: scala.meta.Type.ImplicitFunction)) => liftTypeImplicitFunction(y.asInstanceOf[scala.meta.Type.ImplicitFunction])
      case (y @ (_: scala.meta.Type.Tuple)) => liftTypeTuple(y.asInstanceOf[scala.meta.Type.Tuple])
      case (y @ (_: scala.meta.Type.With)) => liftTypeWith(y.asInstanceOf[scala.meta.Type.With])
      case (y @ (_: scala.meta.Type.And)) => liftTypeAnd(y.asInstanceOf[scala.meta.Type.And])
      case (y @ (_: scala.meta.Type.Or)) => liftTypeOr(y.asInstanceOf[scala.meta.Type.Or])
      case (y @ (_: scala.meta.Type.Refine)) => liftTypeRefine(y.asInstanceOf[scala.meta.Type.Refine])
      case (y @ (_: scala.meta.Type.Existential)) => liftTypeExistential(y.asInstanceOf[scala.meta.Type.Existential])
      case (y @ (_: scala.meta.Type.Annotate)) => liftTypeAnnotate(y.asInstanceOf[scala.meta.Type.Annotate])
      case (y @ (_: scala.meta.Type.Lambda)) => liftTypeLambda(y.asInstanceOf[scala.meta.Type.Lambda])
      case (y @ (_: scala.meta.Type.AnonymousLambda)) => liftTypeAnonymousLambda(y.asInstanceOf[scala.meta.Type.AnonymousLambda])
      case (y @ (_: scala.meta.Type.Macro)) => liftTypeMacro(y.asInstanceOf[scala.meta.Type.Macro])
      case (y @ (_: scala.meta.Type.Method)) => liftTypeMethod(y.asInstanceOf[scala.meta.Type.Method])
      case (y @ (_: scala.meta.Type.PatWildcard)) => liftTypePatWildcard(y.asInstanceOf[scala.meta.Type.PatWildcard])
      case (y @ (_: scala.meta.Type.ByName)) => liftTypeByName(y.asInstanceOf[scala.meta.Type.ByName])
      case (y @ (_: scala.meta.Type.Repeated)) => liftTypeRepeated(y.asInstanceOf[scala.meta.Type.Repeated])
      case (y @ (_: scala.meta.Type.Var)) => liftTypeVar(y.asInstanceOf[scala.meta.Type.Var])
      case (y @ (_: scala.meta.Type.Match)) => liftTypeMatch(y.asInstanceOf[scala.meta.Type.Match])
      case (y @ (_: scala.meta.Lit.Null)) => liftLitNull(y.asInstanceOf[scala.meta.Lit.Null])
      case (y @ (_: scala.meta.Lit.Int)) => liftLitInt(y.asInstanceOf[scala.meta.Lit.Int])
      case (y @ (_: scala.meta.Lit.Double)) => liftLitDouble(y.asInstanceOf[scala.meta.Lit.Double])
      case (y @ (_: scala.meta.Lit.Float)) => liftLitFloat(y.asInstanceOf[scala.meta.Lit.Float])
      case (y @ (_: scala.meta.Lit.Byte)) => liftLitByte(y.asInstanceOf[scala.meta.Lit.Byte])
      case (y @ (_: scala.meta.Lit.Short)) => liftLitShort(y.asInstanceOf[scala.meta.Lit.Short])
      case (y @ (_: scala.meta.Lit.Char)) => liftLitChar(y.asInstanceOf[scala.meta.Lit.Char])
      case (y @ (_: scala.meta.Lit.Long)) => liftLitLong(y.asInstanceOf[scala.meta.Lit.Long])
      case (y @ (_: scala.meta.Lit.Boolean)) => liftLitBoolean(y.asInstanceOf[scala.meta.Lit.Boolean])
      case (y @ (_: scala.meta.Lit.Unit)) => liftLitUnit(y.asInstanceOf[scala.meta.Lit.Unit])
      case (y @ (_: scala.meta.Lit.String)) => liftLitString(y.asInstanceOf[scala.meta.Lit.String])
      // case (y @ (_: scala.meta.Lit.Symbol)) => liftLitSymbol(y.asInstanceOf[scala.meta.Lit.Symbol])
      case (y @ (_: scala.meta.Type.Function)) => liftTypeFunction(y.asInstanceOf[scala.meta.Type.Function])
      case (y @ (_: scala.meta.Type.ContextFunction)) => liftTypeContextFunction(y.asInstanceOf[scala.meta.Type.ContextFunction])
      case (y @ (_: scala.meta.Type.Placeholder.Impl)) => liftTypePlaceholderImpl(y.asInstanceOf[scala.meta.Type.Placeholder.Impl])
      case (y @ (_: scala.meta.Type.Wildcard)) => liftTypeWildcard(y.asInstanceOf[scala.meta.Type.Wildcard])
      case (y @ (_: scala.meta.Type.AnonymousParam)) => liftTypeAnonymousParam(y.asInstanceOf[scala.meta.Type.AnonymousParam])
      case (y @ (_: scala.meta.Type.TypedParam)) => liftTypeTypedParam(y.asInstanceOf[scala.meta.Type.TypedParam])
      case (y @ (_: scala.meta.Type.FunctionArg)) => liftTypeFunctionArg(y.asInstanceOf[scala.meta.Type.FunctionArg])
      case (y @ (_: scala.meta.Pat.Var)) => liftPatVar(y.asInstanceOf[scala.meta.Pat.Var])
      case (y @ (_: scala.meta.Pat.Wildcard)) => liftPatWildcard(y.asInstanceOf[scala.meta.Pat.Wildcard])
      case (y @ (_: scala.meta.Pat.SeqWildcard)) => liftPatSeqWildcard(y.asInstanceOf[scala.meta.Pat.SeqWildcard])
      case (y @ (_: scala.meta.Pat.Bind)) => liftPatBind(y.asInstanceOf[scala.meta.Pat.Bind])
      case (y @ (_: scala.meta.Pat.Alternative)) => liftPatAlternative(y.asInstanceOf[scala.meta.Pat.Alternative])
      case (y @ (_: scala.meta.Pat.Tuple)) => liftPatTuple(y.asInstanceOf[scala.meta.Pat.Tuple])
      case (y @ (_: scala.meta.Pat.Repeated)) => liftPatRepeated(y.asInstanceOf[scala.meta.Pat.Repeated])
      case (y @ (_: scala.meta.Pat.Extract)) => liftPatExtract(y.asInstanceOf[scala.meta.Pat.Extract])
      case (y @ (_: scala.meta.Pat.ExtractInfix)) => liftPatExtractInfix(y.asInstanceOf[scala.meta.Pat.ExtractInfix])
      case (y @ (_: scala.meta.Pat.Interpolate)) => liftPatInterpolate(y.asInstanceOf[scala.meta.Pat.Interpolate])
      case (y @ (_: scala.meta.Pat.Xml)) => liftPatXml(y.asInstanceOf[scala.meta.Pat.Xml])
      case (y @ (_: scala.meta.Pat.Typed)) => liftPatTyped(y.asInstanceOf[scala.meta.Pat.Typed])
      case (y @ (_: scala.meta.Pat.Macro)) => liftPatMacro(y.asInstanceOf[scala.meta.Pat.Macro])
      case (y @ (_: scala.meta.Pat.Given)) => liftPatGiven(y.asInstanceOf[scala.meta.Pat.Given])
      case (y @ (_: scala.meta.Pkg)) => liftPkg(y.asInstanceOf[scala.meta.Pkg])
      case (y @ (_: scala.meta.Pkg.Object)) => liftPkgObject(y.asInstanceOf[scala.meta.Pkg.Object])
      case (y @ (_: scala.meta.Ctor.Secondary)) => liftCtorSecondary(y.asInstanceOf[scala.meta.Ctor.Secondary])
      case (y @ (_: scala.meta.Term.Interpolate)) => liftTermInterpolate(y.asInstanceOf[scala.meta.Term.Interpolate])
      case (y @ (_: scala.meta.Term.Xml)) => liftTermXml(y.asInstanceOf[scala.meta.Term.Xml])
      case (y @ (_: scala.meta.Term.Apply)) => liftTermApply(y.asInstanceOf[scala.meta.Term.Apply])
      case (y @ (_: scala.meta.Term.ApplyUsing)) => liftTermApplyUsing(y.asInstanceOf[scala.meta.Term.ApplyUsing])
      case (y @ (_: scala.meta.Term.ApplyType)) => liftTermApplyType(y.asInstanceOf[scala.meta.Term.ApplyType])
      case (y @ (_: scala.meta.Term.ApplyInfix)) => liftTermApplyInfix(y.asInstanceOf[scala.meta.Term.ApplyInfix])
      case (y @ (_: scala.meta.Term.Assign)) => liftTermAssign(y.asInstanceOf[scala.meta.Term.Assign])
      case (y @ (_: scala.meta.Term.Return)) => liftTermReturn(y.asInstanceOf[scala.meta.Term.Return])
      case (y @ (_: scala.meta.Term.Throw)) => liftTermThrow(y.asInstanceOf[scala.meta.Term.Throw])
      case (y @ (_: scala.meta.Term.Ascribe)) => liftTermAscribe(y.asInstanceOf[scala.meta.Term.Ascribe])
      case (y @ (_: scala.meta.Term.Annotate)) => liftTermAnnotate(y.asInstanceOf[scala.meta.Term.Annotate])
      case (y @ (_: scala.meta.Term.Tuple)) => liftTermTuple(y.asInstanceOf[scala.meta.Term.Tuple])
      case (y @ (_: scala.meta.Term.Block)) => liftTermBlock(y.asInstanceOf[scala.meta.Term.Block])
      case (y @ (_: scala.meta.Term.EndMarker)) => liftTermEndMarker(y.asInstanceOf[scala.meta.Term.EndMarker])
      case (y @ (_: scala.meta.Term.If)) => liftTermIf(y.asInstanceOf[scala.meta.Term.If])
      case (y @ (_: scala.meta.Term.QuotedMacroExpr)) => liftTermQuotedMacroExpr(y.asInstanceOf[scala.meta.Term.QuotedMacroExpr])
      case (y @ (_: scala.meta.Term.QuotedMacroType)) => liftTermQuotedMacroType(y.asInstanceOf[scala.meta.Term.QuotedMacroType])
      case (y @ (_: scala.meta.Term.SplicedMacroExpr)) => liftTermSplicedMacroExpr(y.asInstanceOf[scala.meta.Term.SplicedMacroExpr])
      case (y @ (_: scala.meta.Term.SplicedMacroPat)) => liftTermSplicedMacroPat(y.asInstanceOf[scala.meta.Term.SplicedMacroPat])
      case (y @ (_: scala.meta.Term.Match)) => liftTermMatch(y.asInstanceOf[scala.meta.Term.Match])
      case (y @ (_: scala.meta.Term.Try)) => liftTermTry(y.asInstanceOf[scala.meta.Term.Try])
      case (y @ (_: scala.meta.Term.TryWithHandler)) => liftTermTryWithHandler(y.asInstanceOf[scala.meta.Term.TryWithHandler])
      case (y @ (_: scala.meta.Term.AnonymousFunction)) => liftTermAnonymousFunction(y.asInstanceOf[scala.meta.Term.AnonymousFunction])
      case (y @ (_: scala.meta.Term.PolyFunction)) => liftTermPolyFunction(y.asInstanceOf[scala.meta.Term.PolyFunction])
      case (y @ (_: scala.meta.Term.PartialFunction)) => liftTermPartialFunction(y.asInstanceOf[scala.meta.Term.PartialFunction])
      case (y @ (_: scala.meta.Term.While)) => liftTermWhile(y.asInstanceOf[scala.meta.Term.While])
      case (y @ (_: scala.meta.Term.Do)) => liftTermDo(y.asInstanceOf[scala.meta.Term.Do])
      case (y @ (_: scala.meta.Term.For)) => liftTermFor(y.asInstanceOf[scala.meta.Term.For])
      case (y @ (_: scala.meta.Term.ForYield)) => liftTermForYield(y.asInstanceOf[scala.meta.Term.ForYield])
      case (y @ (_: scala.meta.Term.New)) => liftTermNew(y.asInstanceOf[scala.meta.Term.New])
      case (y @ (_: scala.meta.Term.NewAnonymous)) => liftTermNewAnonymous(y.asInstanceOf[scala.meta.Term.NewAnonymous])
      case (y @ (_: scala.meta.Term.Placeholder)) => liftTermPlaceholder(y.asInstanceOf[scala.meta.Term.Placeholder])
      case (y @ (_: scala.meta.Term.Eta)) => liftTermEta(y.asInstanceOf[scala.meta.Term.Eta])
      case (y @ (_: scala.meta.Term.Repeated)) => liftTermRepeated(y.asInstanceOf[scala.meta.Term.Repeated])
      case (y @ (_: scala.meta.Term.ContextFunction)) => liftTermContextFunction(y.asInstanceOf[scala.meta.Term.ContextFunction])
      case (y @ (_: scala.meta.Term.Function)) => liftTermFunction(y.asInstanceOf[scala.meta.Term.Function])
      case (y @ (_: scala.meta.Defn.Given)) => liftDefnGiven(y.asInstanceOf[scala.meta.Defn.Given])
      case (y @ (_: scala.meta.Defn.Enum)) => liftDefnEnum(y.asInstanceOf[scala.meta.Defn.Enum])
      case (y @ (_: scala.meta.Defn.Class)) => liftDefnClass(y.asInstanceOf[scala.meta.Defn.Class])
      case (y @ (_: scala.meta.Defn.Trait)) => liftDefnTrait(y.asInstanceOf[scala.meta.Defn.Trait])
      case (y @ (_: scala.meta.Defn.Object)) => liftDefnObject(y.asInstanceOf[scala.meta.Defn.Object])
      case (y @ (_: scala.meta.Decl.Val)) => liftDeclVal(y.asInstanceOf[scala.meta.Decl.Val])
      case (y @ (_: scala.meta.Decl.Var)) => liftDeclVar(y.asInstanceOf[scala.meta.Decl.Var])
      case (y @ (_: scala.meta.Decl.Def)) => liftDeclDef(y.asInstanceOf[scala.meta.Decl.Def])
      case (y @ (_: scala.meta.Decl.Type)) => liftDeclType(y.asInstanceOf[scala.meta.Decl.Type])
      case (y @ (_: scala.meta.Decl.Given)) => liftDeclGiven(y.asInstanceOf[scala.meta.Decl.Given])
      case (y @ (_: scala.meta.Defn.Val)) => liftDefnVal(y.asInstanceOf[scala.meta.Defn.Val])
      case (y @ (_: scala.meta.Defn.Var)) => liftDefnVar(y.asInstanceOf[scala.meta.Defn.Var])
      case (y @ (_: scala.meta.Defn.EnumCase)) => liftDefnEnumCase(y.asInstanceOf[scala.meta.Defn.EnumCase])
      case (y @ (_: scala.meta.Defn.RepeatedEnumCase)) => liftDefnRepeatedEnumCase(y.asInstanceOf[scala.meta.Defn.RepeatedEnumCase])
      case (y @ (_: scala.meta.Defn.GivenAlias)) => liftDefnGivenAlias(y.asInstanceOf[scala.meta.Defn.GivenAlias])
      case (y @ (_: scala.meta.Defn.Def)) => liftDefnDef(y.asInstanceOf[scala.meta.Defn.Def])
      case (y @ (_: scala.meta.Defn.Macro)) => liftDefnMacro(y.asInstanceOf[scala.meta.Defn.Macro])
      case (y @ (_: scala.meta.Defn.Type)) => liftDefnType(y.asInstanceOf[scala.meta.Defn.Type])
      case (y @ (_: scala.meta.Defn.ExtensionGroup)) => liftDefnExtensionGroup(y.asInstanceOf[scala.meta.Defn.ExtensionGroup])
      case (y @ (_: scala.meta.Import)) => liftImport(y.asInstanceOf[scala.meta.Import])
      case (y @ (_: scala.meta.Export)) => liftExport(y.asInstanceOf[scala.meta.Export])
      case (y @ (_: scala.meta.Term.ArgClause)) => liftTermArgClause(y.asInstanceOf[scala.meta.Term.ArgClause])
      case (y @ (_: scala.meta.Type.ArgClause)) => liftTypeArgClause(y.asInstanceOf[scala.meta.Type.ArgClause])
      case (y @ (_: scala.meta.Pat.ArgClause)) => liftPatArgClause(y.asInstanceOf[scala.meta.Pat.ArgClause])
      case (y @ (_: scala.meta.Term.ParamClause)) => liftTermParamClause(y.asInstanceOf[scala.meta.Term.ParamClause])
      case (y @ (_: scala.meta.Type.ParamClause)) => liftTypeParamClause(y.asInstanceOf[scala.meta.Type.ParamClause])
      case (y @ (_: scala.meta.Enumerator.Generator)) => liftEnumeratorGenerator(y.asInstanceOf[scala.meta.Enumerator.Generator])
      case (y @ (_: scala.meta.Enumerator.CaseGenerator)) => liftEnumeratorCaseGenerator(y.asInstanceOf[scala.meta.Enumerator.CaseGenerator])
      case (y @ (_: scala.meta.Enumerator.Val)) => liftEnumeratorVal(y.asInstanceOf[scala.meta.Enumerator.Val])
      case (y @ (_: scala.meta.Case)) => liftCase(y.asInstanceOf[scala.meta.Case])
      case (y @ (_: scala.meta.TypeCase)) => liftTypeCase(y.asInstanceOf[scala.meta.TypeCase])
      case (y @ (_: scala.meta.Type.Param)) => liftTypeParam(y.asInstanceOf[scala.meta.Type.Param])
      case (y @ (_: scala.meta.Term.Param)) => liftTermParam(y.asInstanceOf[scala.meta.Term.Param])
      case (y @ (_: scala.meta.Self)) => liftSelf(y.asInstanceOf[scala.meta.Self])
      case (y @ (_: scala.meta.Ctor.Primary)) => liftCtorPrimary(y.asInstanceOf[scala.meta.Ctor.Primary])
      case (y @ (_: scala.meta.Mod.Annot)) => liftModAnnot(y.asInstanceOf[scala.meta.Mod.Annot])
      case (y @ (_: scala.meta.Mod.Private)) => liftModPrivate(y.asInstanceOf[scala.meta.Mod.Private])
      case (y @ (_: scala.meta.Mod.Protected)) => liftModProtected(y.asInstanceOf[scala.meta.Mod.Protected])
      case (y @ (_: scala.meta.Mod.Final)) => liftModFinal(y.asInstanceOf[scala.meta.Mod.Final])
      case (y @ (_: scala.meta.Mod.Sealed)) => liftModSealed(y.asInstanceOf[scala.meta.Mod.Sealed])
      case (y @ (_: scala.meta.Mod.Open)) => liftModOpen(y.asInstanceOf[scala.meta.Mod.Open])
      case (y @ (_: scala.meta.Mod.Super)) => liftModSuper(y.asInstanceOf[scala.meta.Mod.Super])
      case (y @ (_: scala.meta.Mod.Override)) => liftModOverride(y.asInstanceOf[scala.meta.Mod.Override])
      case (y @ (_: scala.meta.Mod.Case)) => liftModCase(y.asInstanceOf[scala.meta.Mod.Case])
      case (y @ (_: scala.meta.Mod.Abstract)) => liftModAbstract(y.asInstanceOf[scala.meta.Mod.Abstract])
      case (y @ (_: scala.meta.Mod.Lazy)) => liftModLazy(y.asInstanceOf[scala.meta.Mod.Lazy])
      case (y @ (_: scala.meta.Mod.ValParam)) => liftModValParam(y.asInstanceOf[scala.meta.Mod.ValParam])
      case (y @ (_: scala.meta.Mod.VarParam)) => liftModVarParam(y.asInstanceOf[scala.meta.Mod.VarParam])
      case (y @ (_: scala.meta.Mod.Infix)) => liftModInfix(y.asInstanceOf[scala.meta.Mod.Infix])
      case (y @ (_: scala.meta.Mod.Inline)) => liftModInline(y.asInstanceOf[scala.meta.Mod.Inline])
      case (y @ (_: scala.meta.Mod.Opaque)) => liftModOpaque(y.asInstanceOf[scala.meta.Mod.Opaque])
      case (y @ (_: scala.meta.Mod.Transparent)) => liftModTransparent(y.asInstanceOf[scala.meta.Mod.Transparent])
      case (y @ (_: scala.meta.Mod.Erased)) => liftModErased(y.asInstanceOf[scala.meta.Mod.Erased])
      case (y @ (_: scala.meta.Mod.Implicit)) => liftModImplicit(y.asInstanceOf[scala.meta.Mod.Implicit])
      case (y @ (_: scala.meta.Mod.Using)) => liftModUsing(y.asInstanceOf[scala.meta.Mod.Using])
      case (y @ (_: scala.meta.Mod.Covariant)) => liftModCovariant(y.asInstanceOf[scala.meta.Mod.Covariant])
      case (y @ (_: scala.meta.Mod.Contravariant)) => liftModContravariant(y.asInstanceOf[scala.meta.Mod.Contravariant])
      case (y @ (_: scala.meta.Enumerator.Guard)) => liftEnumeratorGuard(y.asInstanceOf[scala.meta.Enumerator.Guard])
      case (y @ (_: scala.meta.Template.Body)) => liftTemplateBody(y.asInstanceOf[scala.meta.Template.Body])
      case (y @ (_: scala.meta.Type.CasesBlock)) => liftTypeCasesBlock(y.asInstanceOf[scala.meta.Type.CasesBlock])
      case (y @ (_: scala.meta.Term.CasesBlock)) => liftTermCasesBlock(y.asInstanceOf[scala.meta.Term.CasesBlock])
      case (y @ (_: scala.meta.Term.EnumeratorsBlock)) => liftTermEnumeratorsBlock(y.asInstanceOf[scala.meta.Term.EnumeratorsBlock])
      case (y @ (_: scala.meta.Stat.Block)) => liftStatBlock(y.asInstanceOf[scala.meta.Stat.Block])
      case (y @ (_: scala.meta.Ctor.Block)) => liftCtorBlock(y.asInstanceOf[scala.meta.Ctor.Block])
      case (Y @ (_: scala.meta.Pkg.Body)) => liftPkgBody(y.asInstanceOf[scala.meta.Pkg.Body])
      case _ => sys.error("none of leafs matched " + (y.getClass))
    }
  }
}